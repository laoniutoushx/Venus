# [main], [users] and [roles] above here
[main]
# 权限 字符串 验证 permission
urlPermissionResolver = sos.haruhi.shiro.permission.UrlPermissionResolver
securityManager.authorizer.permissionResolver = $urlPermissionResolver

authc.loginUrl=/login
roles.unauthorizedUrl=/unauth.jsp
perms.unauthorizedUrl=/unauth.jsp

userRealm=sos.haruhi.shiro.realm.UserRealm


# 身份验证 matcher
hashMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
hashMatcher.hashAlgorithmName=md5
userRealm.credentialsMatcher=$hashMatcher

securityManager.realms=$userRealm

[filters]
resFilter=sos.haruhi.shiro.filter.ResCheckFilter
resFilter.errorUrl=/unauth.jsp

[urls]
## admin 请求需要通过资源检查的 filter
/admin/**=authc,resFilter
/login=anon
/logout=logout








## 老版本测试用例
#[filters]
#accessFilter=sos.haruhi.shiro.filter.MyAccessControlFilter
#pathFilter=sos.haruhi.shiro.filter.MyPathMatchingFilter

## [urls]
#/**=accessFilter['123', 'tset', 'laoniutou']
#/**=pathFilter['123', 'tset', 'laoniutou']

#/admin/**=authc,[ADMIN]
#/logout=logout

## 权限由上到下匹配，匹配到一个后不会继续匹配下一个
# /admin/role/**=authc,roles[CUSTOMER]
# /admin/user/**=authc,roles[ADMIN]
# /admin/**=authc
# /logout=logout

# /admin/**=authc
# /user/add.jsp=authc,perms[user:add]
# /user/**=authc
# /login=anon
# /logout=logout

# l拦截器顺序 影响权限读取